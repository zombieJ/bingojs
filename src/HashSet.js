BJ.HashSet = function(array) {	// TODO: init objects into set	var _obj = new Object();	var _aryEntities = new Array();			// entity array		var _capacity = 1 << 16;	var _size = 0;	function __getPos(element) {		var _pos;		var _type = typeof element;		if(_type == "number") {			_pos = element % _capacity;		} else if(_type == "boolean") {			_pos = element ? 1 : 0;		} else { 			if(typeof element.hashCode == "number") {				_pos = element.hashCode % _capacity;			} else {				_pos = element.hashCode() % _capacity;			}		}		return _pos;	}	_obj.size = function() {		return _size;	}	_obj.add = function(element) {		var _pos = __getPos(element);		// get list of pipe		if(_aryEntities[_pos] == null) {			_aryEntities[_pos] = new BJ.List();		}		var _lst = _aryEntities[_pos];		var _pos = _lst.indexOf(element);		if(_pos == -1) {			_size++;			_lst.push(element);		} else {			_lst[_pos] = element;		}	}	_obj.contains = function(element) {		var _pos = __getPos(element);		var _lst = _aryEntities[_pos];		if(_lst != null) {			return _lst.contains(element);		}	}	_obj.asList = function() {		var list = new BJ.List();		var len = _aryEntities.length;		for(var i = 0 ; i < len ; i+= 1) {			if(_aryEntities[i] != null) {				_aryEntities[i].each(function(j, element) {					list.push(element);				});			}		}		return list;	}	// init	if(array != null) {		var len = array.length;		for(var i = 0 ; i < len ; i += 1) {			_obj.add(array[i]);		}	}	return _obj;}