BJ.List = function(array) {	var _ary;	if(array == null) {		_ary = new Array();	} else {		_ary = array;	}	_ary.each = function(func) {		for(var j = 0 ; j < _ary.length ; j += 1) {			var obj = _ary[j];			if(func(j, obj) == false) {				break;			}		}	}	_ary.indexOf = function(element, same) {		var ret = -1;		if(typeof element == "object") {			// execute equals logic firstly if element has equals function			var _oriIndex = false;			if(typeof element.equals == "function") {				_oriIndex = true;				try {					_ary.each(function(i, _element) {						if(element.equals(_element)) {							ret = i;							return false;						}					});					if(ret != -1) {						return ret;					}				} catch(err) {					_oriIndex = false;				}			}			if(_oriIndex === false) {				var obj = new BJ.Object(element, true);				_ary.each(function(i, _element) {					if(element === _element) {						ret = i;						return false;					} else if(same === true) {						if(obj.same(_element)) {							ret = i;							return false;						}					} else if(obj.equals(_element)) {						ret = i;						return false;					}				});			}		} else {			_ary.each(function(i, _element) {				if(_element === element) {					ret = i;					return false;				}			});		}		return ret;	}	_ary.contains = function(element, same) {		return _ary.indexOf(element, same) !== -1;	}	_ary.find = function(func) {		var lst = new BJ.List();		_ary.each(function(j, obj) {			if(func(obj) == true) {				lst.push(obj);			}		});		return lst;	}	_ary.first = function(func) {		var _obj = null;		_ary.each(function(j, obj) {			if(func(obj) == true) {				_obj = obj;				return false;			}		});		return _obj;	}	_ary.same = function(ary) {		var _obj = new BJ.Object(_ary, true);		return _obj.same(ary);	}	_ary.remove = function(element, same) {		var _index = _ary.indexOf(element, same);		if(_index != -1) {			_ary.splice(_index, 1);			return true;		}		return false;	}	_ary.removeAll = function(ary, same) {		var ret = false;		var _len = ary.length;		for(var i = 0 ; i < _len ; i += 1) {			ret = _ary.remove(ary[i], same) || ret;		}		return ret;	}	_ary.size = function() {		return _ary.length;	}	return _ary;}